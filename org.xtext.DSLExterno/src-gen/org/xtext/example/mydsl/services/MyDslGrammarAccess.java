/*
* generated by Xtext
*/
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cClasesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cClasesClaseParserRuleCall_0 = (RuleCall)cClasesAssignment.eContents().get(0);
		
		//Model:
		//	clases+=Clase*;
		public ParserRule getRule() { return rule; }

		//clases+=Clase*
		public Assignment getClasesAssignment() { return cClasesAssignment; }

		//Clase
		public RuleCall getClasesClaseParserRuleCall_0() { return cClasesClaseParserRuleCall_0; }
	}

	public class ClaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Clase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProfesorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMateriaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAulaParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPlanificacionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cHorarioParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAsignacionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Clase:
		//	Profesor | Materia | Aula | Planificacion | Horario | Asignacion;
		public ParserRule getRule() { return rule; }

		//Profesor | Materia | Aula | Planificacion | Horario | Asignacion
		public Alternatives getAlternatives() { return cAlternatives; }

		//Profesor
		public RuleCall getProfesorParserRuleCall_0() { return cProfesorParserRuleCall_0; }

		//Materia
		public RuleCall getMateriaParserRuleCall_1() { return cMateriaParserRuleCall_1; }

		//Aula
		public RuleCall getAulaParserRuleCall_2() { return cAulaParserRuleCall_2; }

		//Planificacion
		public RuleCall getPlanificacionParserRuleCall_3() { return cPlanificacionParserRuleCall_3; }

		//Horario
		public RuleCall getHorarioParserRuleCall_4() { return cHorarioParserRuleCall_4; }

		//Asignacion
		public RuleCall getAsignacionParserRuleCall_5() { return cAsignacionParserRuleCall_5; }
	}

	public class HorarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Horario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHorarioInicioAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHorarioInicioINTTerminalRuleCall_1_0 = (RuleCall)cHorarioInicioAssignment_1.eContents().get(0);
		private final Keyword cHastaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cHorarioFinAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHorarioFinINTTerminalRuleCall_3_0 = (RuleCall)cHorarioFinAssignment_3.eContents().get(0);
		private final Keyword cEnKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAulaAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cAulaAulaCrossReference_5_0 = (CrossReference)cAulaAssignment_5.eContents().get(0);
		private final RuleCall cAulaAulaIDTerminalRuleCall_5_0_1 = (RuleCall)cAulaAulaCrossReference_5_0.eContents().get(1);
		
		//Horario:
		//	"de:" horarioInicio=INT "hasta:" horarioFin=INT "en:" aula= //aulas	
		//	[Aula];
		public ParserRule getRule() { return rule; }

		//"de:" horarioInicio=INT "hasta:" horarioFin=INT "en:" aula= //aulas	
		//[Aula]
		public Group getGroup() { return cGroup; }

		//"de:"
		public Keyword getDeKeyword_0() { return cDeKeyword_0; }

		//horarioInicio=INT
		public Assignment getHorarioInicioAssignment_1() { return cHorarioInicioAssignment_1; }

		//INT
		public RuleCall getHorarioInicioINTTerminalRuleCall_1_0() { return cHorarioInicioINTTerminalRuleCall_1_0; }

		//"hasta:"
		public Keyword getHastaKeyword_2() { return cHastaKeyword_2; }

		//horarioFin=INT
		public Assignment getHorarioFinAssignment_3() { return cHorarioFinAssignment_3; }

		//INT
		public RuleCall getHorarioFinINTTerminalRuleCall_3_0() { return cHorarioFinINTTerminalRuleCall_3_0; }

		//"en:"
		public Keyword getEnKeyword_4() { return cEnKeyword_4; }

		//aula= //aulas	
		//[Aula]
		public Assignment getAulaAssignment_5() { return cAulaAssignment_5; }

		////aulas	
		//[Aula]
		public CrossReference getAulaAulaCrossReference_5_0() { return cAulaAulaCrossReference_5_0; }

		//ID
		public RuleCall getAulaAulaIDTerminalRuleCall_5_0_1() { return cAulaAulaIDTerminalRuleCall_5_0_1; }
	}

	public class ProfesorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Profesor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProfesorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cDedicacionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDedicacionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDedicacionDedicacionEnumRuleCall_3_0 = (RuleCall)cDedicacionAssignment_3.eContents().get(0);
		
		//Profesor:
		//	"profesor:" name=ID "dedicacion:" dedicacion=Dedicacion;
		public ParserRule getRule() { return rule; }

		//"profesor:" name=ID "dedicacion:" dedicacion=Dedicacion
		public Group getGroup() { return cGroup; }

		//"profesor:"
		public Keyword getProfesorKeyword_0() { return cProfesorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"dedicacion:"
		public Keyword getDedicacionKeyword_2() { return cDedicacionKeyword_2; }

		//dedicacion=Dedicacion
		public Assignment getDedicacionAssignment_3() { return cDedicacionAssignment_3; }

		//Dedicacion
		public RuleCall getDedicacionDedicacionEnumRuleCall_3_0() { return cDedicacionDedicacionEnumRuleCall_3_0; }
	}

	public class MateriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Materia");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMateriaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cCantidadDeDiasKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCantidadDeDiasAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCantidadDeDiasINTTerminalRuleCall_4_0 = (RuleCall)cCantidadDeDiasAssignment_4.eContents().get(0);
		private final Keyword cCargaHorariaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCargaHorariaAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCargaHorariaINTTerminalRuleCall_6_0 = (RuleCall)cCargaHorariaAssignment_6.eContents().get(0);
		private final Keyword cDictadaPorKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cDictadaPorAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cDictadaPorProfesorCrossReference_8_0 = (CrossReference)cDictadaPorAssignment_8.eContents().get(0);
		private final RuleCall cDictadaPorProfesorIDTerminalRuleCall_8_0_1 = (RuleCall)cDictadaPorProfesorCrossReference_8_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Materia:
		//	"materia:" name=ID "{" "cantidadDeDias:" cantidadDeDias=INT "cargaHoraria:" cargaHoraria=INT "dictadaPor:" dictadaPor= //profesor
		//	[Profesor] "}";
		public ParserRule getRule() { return rule; }

		//"materia:" name=ID "{" "cantidadDeDias:" cantidadDeDias=INT "cargaHoraria:" cargaHoraria=INT "dictadaPor:" dictadaPor= //profesor
		//[Profesor] "}"
		public Group getGroup() { return cGroup; }

		//"materia:"
		public Keyword getMateriaKeyword_0() { return cMateriaKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"cantidadDeDias:"
		public Keyword getCantidadDeDiasKeyword_3() { return cCantidadDeDiasKeyword_3; }

		//cantidadDeDias=INT
		public Assignment getCantidadDeDiasAssignment_4() { return cCantidadDeDiasAssignment_4; }

		//INT
		public RuleCall getCantidadDeDiasINTTerminalRuleCall_4_0() { return cCantidadDeDiasINTTerminalRuleCall_4_0; }

		//"cargaHoraria:"
		public Keyword getCargaHorariaKeyword_5() { return cCargaHorariaKeyword_5; }

		//cargaHoraria=INT
		public Assignment getCargaHorariaAssignment_6() { return cCargaHorariaAssignment_6; }

		//INT
		public RuleCall getCargaHorariaINTTerminalRuleCall_6_0() { return cCargaHorariaINTTerminalRuleCall_6_0; }

		//"dictadaPor:"
		public Keyword getDictadaPorKeyword_7() { return cDictadaPorKeyword_7; }

		//dictadaPor= //profesor
		//[Profesor]
		public Assignment getDictadaPorAssignment_8() { return cDictadaPorAssignment_8; }

		////profesor
		//[Profesor]
		public CrossReference getDictadaPorProfesorCrossReference_8_0() { return cDictadaPorProfesorCrossReference_8_0; }

		//ID
		public RuleCall getDictadaPorProfesorIDTerminalRuleCall_8_0_1() { return cDictadaPorProfesorIDTerminalRuleCall_8_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class AulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Aula");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAulaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRecursosKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRecursosAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRecursosRecursosEnumRuleCall_4_0 = (RuleCall)cRecursosAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Aula:
		//	"aula:" name=ID "{" "recursos:" recursos+=Recursos* "}";
		public ParserRule getRule() { return rule; }

		//"aula:" name=ID "{" "recursos:" recursos+=Recursos* "}"
		public Group getGroup() { return cGroup; }

		//"aula:"
		public Keyword getAulaKeyword_0() { return cAulaKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"recursos:"
		public Keyword getRecursosKeyword_3() { return cRecursosKeyword_3; }

		//recursos+=Recursos*
		public Assignment getRecursosAssignment_4() { return cRecursosAssignment_4; }

		//Recursos
		public RuleCall getRecursosRecursosEnumRuleCall_4_0() { return cRecursosRecursosEnumRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class PlanificacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Planificacion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlanificacionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAnioAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnioINTTerminalRuleCall_1_0 = (RuleCall)cAnioAssignment_1.eContents().get(0);
		private final Keyword cSemestreKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSemestreAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSemestreINTTerminalRuleCall_3_0 = (RuleCall)cSemestreAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cADictarKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMateriasAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cMateriasMateriaCrossReference_6_0 = (CrossReference)cMateriasAssignment_6.eContents().get(0);
		private final RuleCall cMateriasMateriaIDTerminalRuleCall_6_0_1 = (RuleCall)cMateriasMateriaCrossReference_6_0.eContents().get(1);
		private final Assignment cAsignacionesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAsignacionesAsignacionParserRuleCall_7_0 = (RuleCall)cAsignacionesAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Planificacion:
		//	"planificacion:" anio=INT "semestre:" semestre=INT "{" "aDictar:" materias+=[Materia]* //materias
		//	asignaciones+=Asignacion* "}";
		public ParserRule getRule() { return rule; }

		//"planificacion:" anio=INT "semestre:" semestre=INT "{" "aDictar:" materias+=[Materia]* //materias
		//asignaciones+=Asignacion* "}"
		public Group getGroup() { return cGroup; }

		//"planificacion:"
		public Keyword getPlanificacionKeyword_0() { return cPlanificacionKeyword_0; }

		//anio=INT
		public Assignment getAnioAssignment_1() { return cAnioAssignment_1; }

		//INT
		public RuleCall getAnioINTTerminalRuleCall_1_0() { return cAnioINTTerminalRuleCall_1_0; }

		//"semestre:"
		public Keyword getSemestreKeyword_2() { return cSemestreKeyword_2; }

		//semestre=INT
		public Assignment getSemestreAssignment_3() { return cSemestreAssignment_3; }

		//INT
		public RuleCall getSemestreINTTerminalRuleCall_3_0() { return cSemestreINTTerminalRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//"aDictar:"
		public Keyword getADictarKeyword_5() { return cADictarKeyword_5; }

		//materias+=[Materia]*
		public Assignment getMateriasAssignment_6() { return cMateriasAssignment_6; }

		//[Materia]
		public CrossReference getMateriasMateriaCrossReference_6_0() { return cMateriasMateriaCrossReference_6_0; }

		//ID
		public RuleCall getMateriasMateriaIDTerminalRuleCall_6_0_1() { return cMateriasMateriaIDTerminalRuleCall_6_0_1; }

		//asignaciones+=Asignacion*
		public Assignment getAsignacionesAssignment_7() { return cAsignacionesAssignment_7; }

		//Asignacion
		public RuleCall getAsignacionesAsignacionParserRuleCall_7_0() { return cAsignacionesAsignacionParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class AsignacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Asignacion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDiaAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDiaDiaEnumRuleCall_0_0 = (RuleCall)cDiaAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cHorarioAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHorarioHorarioParserRuleCall_2_0 = (RuleCall)cHorarioAssignment_2.eContents().get(0);
		private final Keyword cSeDictaLaMateriaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMateriaAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cMateriaMateriaCrossReference_4_0 = (CrossReference)cMateriaAssignment_4.eContents().get(0);
		private final RuleCall cMateriaMateriaIDTerminalRuleCall_4_0_1 = (RuleCall)cMateriaMateriaCrossReference_4_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Asignacion:
		//	dia=Dia "{" horario=Horario "se dicta la materia:" materia= //materias
		//	[Materia] "}";
		public ParserRule getRule() { return rule; }

		//dia=Dia "{" horario=Horario "se dicta la materia:" materia= //materias
		//[Materia] "}"
		public Group getGroup() { return cGroup; }

		//dia=Dia
		public Assignment getDiaAssignment_0() { return cDiaAssignment_0; }

		//Dia
		public RuleCall getDiaDiaEnumRuleCall_0_0() { return cDiaDiaEnumRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//horario=Horario
		public Assignment getHorarioAssignment_2() { return cHorarioAssignment_2; }

		//Horario
		public RuleCall getHorarioHorarioParserRuleCall_2_0() { return cHorarioHorarioParserRuleCall_2_0; }

		//"se dicta la materia:"
		public Keyword getSeDictaLaMateriaKeyword_3() { return cSeDictaLaMateriaKeyword_3; }

		//materia= //materias
		//[Materia]
		public Assignment getMateriaAssignment_4() { return cMateriaAssignment_4; }

		////materias
		//[Materia]
		public CrossReference getMateriaMateriaCrossReference_4_0() { return cMateriaMateriaCrossReference_4_0; }

		//ID
		public RuleCall getMateriaMateriaIDTerminalRuleCall_4_0_1() { return cMateriaMateriaIDTerminalRuleCall_4_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	
	
	public class DedicacionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Dedicacion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSimpleEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSimpleSimpleKeyword_0_0 = (Keyword)cSimpleEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSemiEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSemiSemiKeyword_1_0 = (Keyword)cSemiEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cExclusivaEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cExclusivaExclusivaKeyword_2_0 = (Keyword)cExclusivaEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Dedicacion:
		//	Simple | Semi | Exclusiva;
		public EnumRule getRule() { return rule; }

		//Simple | Semi | Exclusiva
		public Alternatives getAlternatives() { return cAlternatives; }

		//Simple
		public EnumLiteralDeclaration getSimpleEnumLiteralDeclaration_0() { return cSimpleEnumLiteralDeclaration_0; }

		//"Simple"
		public Keyword getSimpleSimpleKeyword_0_0() { return cSimpleSimpleKeyword_0_0; }

		//Semi
		public EnumLiteralDeclaration getSemiEnumLiteralDeclaration_1() { return cSemiEnumLiteralDeclaration_1; }

		//"Semi"
		public Keyword getSemiSemiKeyword_1_0() { return cSemiSemiKeyword_1_0; }

		//Exclusiva
		public EnumLiteralDeclaration getExclusivaEnumLiteralDeclaration_2() { return cExclusivaEnumLiteralDeclaration_2; }

		//"Exclusiva"
		public Keyword getExclusivaExclusivaKeyword_2_0() { return cExclusivaExclusivaKeyword_2_0; }
	}

	public class RecursosElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Recursos");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInternetEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInternetInternetKeyword_0_0 = (Keyword)cInternetEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cProyectorEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cProyectorProyectorKeyword_1_0 = (Keyword)cProyectorEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMaquinasParaAlumnosEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMaquinasParaAlumnosMaquinasParaAlumnosKeyword_2_0 = (Keyword)cMaquinasParaAlumnosEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMaquinaParaElProfesorEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMaquinaParaElProfesorMaquinaParaElProfesorKeyword_3_0 = (Keyword)cMaquinaParaElProfesorEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Recursos:
		//	Internet | Proyector | MaquinasParaAlumnos | MaquinaParaElProfesor;
		public EnumRule getRule() { return rule; }

		//Internet | Proyector | MaquinasParaAlumnos | MaquinaParaElProfesor
		public Alternatives getAlternatives() { return cAlternatives; }

		//Internet
		public EnumLiteralDeclaration getInternetEnumLiteralDeclaration_0() { return cInternetEnumLiteralDeclaration_0; }

		//"Internet"
		public Keyword getInternetInternetKeyword_0_0() { return cInternetInternetKeyword_0_0; }

		//Proyector
		public EnumLiteralDeclaration getProyectorEnumLiteralDeclaration_1() { return cProyectorEnumLiteralDeclaration_1; }

		//"Proyector"
		public Keyword getProyectorProyectorKeyword_1_0() { return cProyectorProyectorKeyword_1_0; }

		//MaquinasParaAlumnos
		public EnumLiteralDeclaration getMaquinasParaAlumnosEnumLiteralDeclaration_2() { return cMaquinasParaAlumnosEnumLiteralDeclaration_2; }

		//"MaquinasParaAlumnos"
		public Keyword getMaquinasParaAlumnosMaquinasParaAlumnosKeyword_2_0() { return cMaquinasParaAlumnosMaquinasParaAlumnosKeyword_2_0; }

		//MaquinaParaElProfesor
		public EnumLiteralDeclaration getMaquinaParaElProfesorEnumLiteralDeclaration_3() { return cMaquinaParaElProfesorEnumLiteralDeclaration_3; }

		//"MaquinaParaElProfesor"
		public Keyword getMaquinaParaElProfesorMaquinaParaElProfesorKeyword_3_0() { return cMaquinaParaElProfesorMaquinaParaElProfesorKeyword_3_0; }
	}

	public class DiaElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Dia");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLunesEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLunesLunesKeyword_0_0 = (Keyword)cLunesEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMartesEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMartesMartesKeyword_1_0 = (Keyword)cMartesEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMiercolesEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMiercolesMiercolesKeyword_2_0 = (Keyword)cMiercolesEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cJuevesEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cJuevesJuevesKeyword_3_0 = (Keyword)cJuevesEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cViernesEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cViernesViernesKeyword_4_0 = (Keyword)cViernesEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSabadosEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSabadosSabadosKeyword_5_0 = (Keyword)cSabadosEnumLiteralDeclaration_5.eContents().get(0);
		
		/// *
		// * def materiaADar(Dedicacion d)
		// * switch d{
		// * 	case Simple: bla
		// *  case Semi: bla2
		// * / enum Dia:
		//	Lunes | Martes | Miercoles | Jueves | Viernes | Sabados;
		public EnumRule getRule() { return rule; }

		//Lunes | Martes | Miercoles | Jueves | Viernes | Sabados
		public Alternatives getAlternatives() { return cAlternatives; }

		//Lunes
		public EnumLiteralDeclaration getLunesEnumLiteralDeclaration_0() { return cLunesEnumLiteralDeclaration_0; }

		//"Lunes"
		public Keyword getLunesLunesKeyword_0_0() { return cLunesLunesKeyword_0_0; }

		//Martes
		public EnumLiteralDeclaration getMartesEnumLiteralDeclaration_1() { return cMartesEnumLiteralDeclaration_1; }

		//"Martes"
		public Keyword getMartesMartesKeyword_1_0() { return cMartesMartesKeyword_1_0; }

		//Miercoles
		public EnumLiteralDeclaration getMiercolesEnumLiteralDeclaration_2() { return cMiercolesEnumLiteralDeclaration_2; }

		//"Miercoles"
		public Keyword getMiercolesMiercolesKeyword_2_0() { return cMiercolesMiercolesKeyword_2_0; }

		//Jueves
		public EnumLiteralDeclaration getJuevesEnumLiteralDeclaration_3() { return cJuevesEnumLiteralDeclaration_3; }

		//"Jueves"
		public Keyword getJuevesJuevesKeyword_3_0() { return cJuevesJuevesKeyword_3_0; }

		//Viernes
		public EnumLiteralDeclaration getViernesEnumLiteralDeclaration_4() { return cViernesEnumLiteralDeclaration_4; }

		//"Viernes"
		public Keyword getViernesViernesKeyword_4_0() { return cViernesViernesKeyword_4_0; }

		//Sabados
		public EnumLiteralDeclaration getSabadosEnumLiteralDeclaration_5() { return cSabadosEnumLiteralDeclaration_5; }

		//"Sabados"
		public Keyword getSabadosSabadosKeyword_5_0() { return cSabadosSabadosKeyword_5_0; }
	}
	
	private ModelElements pModel;
	private ClaseElements pClase;
	private HorarioElements pHorario;
	private ProfesorElements pProfesor;
	private MateriaElements pMateria;
	private AulaElements pAula;
	private PlanificacionElements pPlanificacion;
	private AsignacionElements pAsignacion;
	private DedicacionElements unknownRuleDedicacion;
	private RecursosElements unknownRuleRecursos;
	private DiaElements unknownRuleDia;
	
	private final Grammar grammar;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//Model:
	//	clases+=Clase*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Clase:
	//	Profesor | Materia | Aula | Planificacion | Horario | Asignacion;
	public ClaseElements getClaseAccess() {
		return (pClase != null) ? pClase : (pClase = new ClaseElements());
	}
	
	public ParserRule getClaseRule() {
		return getClaseAccess().getRule();
	}

	//Horario:
	//	"de:" horarioInicio=INT "hasta:" horarioFin=INT "en:" aula= //aulas	
	//	[Aula];
	public HorarioElements getHorarioAccess() {
		return (pHorario != null) ? pHorario : (pHorario = new HorarioElements());
	}
	
	public ParserRule getHorarioRule() {
		return getHorarioAccess().getRule();
	}

	//Profesor:
	//	"profesor:" name=ID "dedicacion:" dedicacion=Dedicacion;
	public ProfesorElements getProfesorAccess() {
		return (pProfesor != null) ? pProfesor : (pProfesor = new ProfesorElements());
	}
	
	public ParserRule getProfesorRule() {
		return getProfesorAccess().getRule();
	}

	//Materia:
	//	"materia:" name=ID "{" "cantidadDeDias:" cantidadDeDias=INT "cargaHoraria:" cargaHoraria=INT "dictadaPor:" dictadaPor= //profesor
	//	[Profesor] "}";
	public MateriaElements getMateriaAccess() {
		return (pMateria != null) ? pMateria : (pMateria = new MateriaElements());
	}
	
	public ParserRule getMateriaRule() {
		return getMateriaAccess().getRule();
	}

	//Aula:
	//	"aula:" name=ID "{" "recursos:" recursos+=Recursos* "}";
	public AulaElements getAulaAccess() {
		return (pAula != null) ? pAula : (pAula = new AulaElements());
	}
	
	public ParserRule getAulaRule() {
		return getAulaAccess().getRule();
	}

	//Planificacion:
	//	"planificacion:" anio=INT "semestre:" semestre=INT "{" "aDictar:" materias+=[Materia]* //materias
	//	asignaciones+=Asignacion* "}";
	public PlanificacionElements getPlanificacionAccess() {
		return (pPlanificacion != null) ? pPlanificacion : (pPlanificacion = new PlanificacionElements());
	}
	
	public ParserRule getPlanificacionRule() {
		return getPlanificacionAccess().getRule();
	}

	//Asignacion:
	//	dia=Dia "{" horario=Horario "se dicta la materia:" materia= //materias
	//	[Materia] "}";
	public AsignacionElements getAsignacionAccess() {
		return (pAsignacion != null) ? pAsignacion : (pAsignacion = new AsignacionElements());
	}
	
	public ParserRule getAsignacionRule() {
		return getAsignacionAccess().getRule();
	}

	//enum Dedicacion:
	//	Simple | Semi | Exclusiva;
	public DedicacionElements getDedicacionAccess() {
		return (unknownRuleDedicacion != null) ? unknownRuleDedicacion : (unknownRuleDedicacion = new DedicacionElements());
	}
	
	public EnumRule getDedicacionRule() {
		return getDedicacionAccess().getRule();
	}

	//enum Recursos:
	//	Internet | Proyector | MaquinasParaAlumnos | MaquinaParaElProfesor;
	public RecursosElements getRecursosAccess() {
		return (unknownRuleRecursos != null) ? unknownRuleRecursos : (unknownRuleRecursos = new RecursosElements());
	}
	
	public EnumRule getRecursosRule() {
		return getRecursosAccess().getRule();
	}

	/// *
	// * def materiaADar(Dedicacion d)
	// * switch d{
	// * 	case Simple: bla
	// *  case Semi: bla2
	// * / enum Dia:
	//	Lunes | Martes | Miercoles | Jueves | Viernes | Sabados;
	public DiaElements getDiaAccess() {
		return (unknownRuleDia != null) ? unknownRuleDia : (unknownRuleDia = new DiaElements());
	}
	
	public EnumRule getDiaRule() {
		return getDiaAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=XExpression ")" | =>
	//	(declaredParam=JvmFormalParameter ":")? switch=XExpression) "{" cases+=XCasePart* ("default" ":" default=XExpression)?
	//	"}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ("case" case=XExpression)? (":" then=XExpression | ",");
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	=> ({XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression:
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? (=>
	//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?="*" | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXbase.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
