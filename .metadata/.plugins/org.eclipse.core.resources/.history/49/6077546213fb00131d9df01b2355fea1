/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.validation

import org.eclipse.xtext.validation.Check
import org.xtext.example.mydsl.myDsl.Materia
import org.xtext.example.mydsl.myDsl.MyDslPackage
import org.xtext.example.mydsl.myDsl.Planificacion
import org.xtext.example.mydsl.myDsl.Dedicacion
import org.xtext.example.mydsl.myDsl.Profesor
import org.eclipse.emf.common.util.EList

//import org.eclipse.xtext.validation.Check

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
 
// 	if(true){
//			error("El profesor " + p.nombre + "ya tiene asignada una dedicacion", p ,
//				MyDslPackage.Literals.PROFESOR__DEDICACION
//			)
class MyDslValidator extends AbstractMyDslValidator {


	@Check
	def checkDedicacion(Materia m) {
		val profesor = m.dictadaPor
		val planificacion = m.eContainer as Planificacion
		val materias = planificacion.materias
		if(cantidadDeVeces(profesor,materias) > 1 && profesor.dedicacion.equals(Dedicacion.SIMPLE)){
			
		}
	}
	
	def cantidadDeVeces(Profesor profesor, EList<Materia> list) {
		var cant = list.filter [materia | materia.dictadaPor.equals(profesor)]
		return cant.size
	}
	
}
