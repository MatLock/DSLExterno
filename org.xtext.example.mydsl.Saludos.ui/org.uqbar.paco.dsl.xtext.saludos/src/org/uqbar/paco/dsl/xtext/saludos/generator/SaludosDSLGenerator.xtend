/*
 * generated by Xtext
 */
package org.uqbar.paco.dsl.xtext.saludos.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.uqbar.paco.dsl.xtext.saludos.saludosDSL.Model

import static extension java.lang.Character.*

/**
 * Genera una clase Java con el nombre del archivo.
 * Esa clase tendrá un main y un System out por cada
 * saludo
 *
 * @author jfernandes 
 */
class SaludosDSLGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		val model = resource.allContents.head as Model
		val fileName = resource.URI.lastSegment
		val className = fileName.until(".").firstUpper
		
		fsa.generateFile(className + ".java", model.generateJavaClass(className))
	}
	
	def generateJavaClass(Model m, String className) '''
		public class «className» {
			public static void main(String[] args) {
				«FOR saludo : m.saludos »
				System.out.println("Hola «saludo.AQuien» !!!");
				«ENDFOR»
			}
		}
	'''
	
	// ***************************
	// ** utilidades strings
	// ***************************
	
	def until(String aString, String limit) {
		aString.substring(0, aString.indexOf(limit))
	}
	
	def firstUpper(String aString) {
		aString.charAt(0).toUpperCase + aString.substring(1)
	}
}
