/*
 * generated by Xtext
 */
package org.uqbar.paco.dsl.xtext.saludos.validation

import org.eclipse.xtext.validation.Check
import org.uqbar.paco.dsl.xtext.saludos.saludosDSL.Bienvenida
import org.uqbar.paco.dsl.xtext.saludos.saludosDSL.Despedida
import org.uqbar.paco.dsl.xtext.saludos.saludosDSL.Model
import org.uqbar.paco.dsl.xtext.saludos.saludosDSL.Saludo
import org.uqbar.paco.dsl.xtext.saludos.saludosDSL.SaludosDSLPackage
import org.uqbar.paco.dsl.xtext.saludos.saludosDSL.Alguien

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class SaludosDSLValidator extends AbstractSaludosDSLValidator {
	public static final String DESPEDIDA_SIN_BIENVENIDA = "DESPEDIDA_SIN_BIENVENIDA"  

	@Check
	def noPuedeHaberDosAlguienConElMismoNombre(Alguien quien) {
		if (quien.model.quienes.filter[q | q.name == quien.name].size > 1) {
			error('''Quien duplicado con nombre «quien.name»''', quien, SaludosDSLPackage.Literals.ALGUIEN__NAME)
		} 
	}

	@Check
	def soloSeDespideAQuienSeDioLaBienvenida(Despedida despedida) {
		if (despedida.bienvenida() == null) {
			error("Para despedir, primero debe dar la bienvenida", 
				despedida, 
				SaludosDSLPackage
					.Literals
					.SALUDO__AQUIEN, DESPEDIDA_SIN_BIENVENIDA
			)
		}
		else if (despedida.bienvenida.estaDespuesDe(despedida)) {
			error("La despedida va DESPUES de la bienvenida!", despedida, SaludosDSLPackage.Literals.SALUDO__AQUIEN)
		}
	}
	
	// ******************************************
	// ** extensiones al modelo semantico
	// ******************************************
	
	def bienvenida(Despedida despedida) {
		despedida.model.saludos.filter(Bienvenida).findFirst[AQuien == despedida.AQuien]
	}
	
	def model(Alguien alguien) {
		alguien.eContainer as Model
	}
	
	def model(Saludo saludo) {
		saludo.eContainer as Model
	}
	
	def estaDespuesDe(Saludo a, Saludo b) {
		a.posicion > b.posicion
	}
	
	def posicion(Saludo s) {
		s.model.saludos.indexOf(s)
	}
	
}
